{"name":"rprintf","tagline":"Adaptive builder for formatted strings","body":"\r\n\r\n# rprintf\r\n\r\n[![Linux Build Status](https://travis-ci.org/renkun-ken/rprintf.png?branch=master)](https://travis-ci.org/renkun-ken/rprintf) \r\n[![Windows Build status](https://ci.appveyor.com/api/projects/status/github/renkun-ken/rprintf?svg=true)](https://ci.appveyor.com/project/renkun-ken/rprintf)\r\n[![Coverage Status](https://coveralls.io/repos/renkun-ken/rprintf/badge.svg)](https://coveralls.io/r/renkun-ken/rprintf) \r\n[![CRAN Version](http://www.r-pkg.org/badges/version/rprintf)](http://cran.rstudio.com/web/packages/rprintf)\r\n\r\n\r\nrprintf is an adaptive builder for formatted strings. Currently it provides a set of tools for building formatted strings under various replacement rules: \r\n\r\n- C-style formatting with `sprintf`\r\n- Number-based formatting\r\n- Variable-based formatting\r\n\r\nThe primary goal of this package is to make it easier to produce formatted strings in all popular styles.\r\n\r\n## Installation\r\n\r\nYou can install from CRAN with\r\n\r\n```r\r\ninstall.packages(\"rprintf\")\r\n```\r\n\r\nor you can install the latest development version from GitHub with\r\n\r\n```r\r\ndevtools::install_github(\"rprintf\",\"renkun-ken\")\r\n```\r\n\r\n## Examples\r\n\r\nThe following examples demonstrate how `rprintf` functions works. You should be familiar with how `sprintf` works first. See the [documentation](http://stat.ethz.ch/R-manual/R-devel/library/base/html/sprintf.html) for more details.\r\n\r\n### C-style formatting\r\n\r\n\r\n```r\r\nlibrary(rprintf)\r\nrprintf(\"Hello, %s\", \"world\")\r\n```\r\n\r\n```\r\n[1] \"Hello, world\"\r\n```\r\n\r\n```r\r\nrprintf(\"%s (%d years old)\", \"Ken\", 24)\r\n```\r\n\r\n```\r\n[1] \"Ken (24 years old)\"\r\n```\r\n\r\n```r\r\nrprintf(\"He is %d but has a height of %.1fcm\", 18, 190)\r\n```\r\n\r\n```\r\n[1] \"He is 18 but has a height of 190.0cm\"\r\n```\r\n\r\n### Number-based formatting\r\n\r\n\r\n```r\r\nrprintf(\"Hello, {1}\", \"world\")\r\n```\r\n\r\n```\r\n[1] \"Hello, world\"\r\n```\r\n\r\n```r\r\nrprintf(\"{1} ({2} years old)\",\"Ken\",24)\r\n```\r\n\r\n```\r\n[1] \"Ken (24 years old)\"\r\n```\r\n\r\n```r\r\nrprintf(\"He is {1} but has a height of {2:.2f}cm\",18,190)\r\n```\r\n\r\n```\r\n[1] \"He is 18 but has a height of 190.00cm\"\r\n```\r\n\r\n```r\r\nrprintf(\"{1}, {2:.1f}, {3:+.2f}, {2}, {1:.0f}\",1.56,2.34,3.78)\r\n```\r\n\r\n```\r\n[1] \"1.56, 2.3, +3.78, 2.34, 2\"\r\n```\r\n\r\n```r\r\nrprintf(\"{2},{1}\",\"x\",\"y\")\r\n```\r\n\r\n```\r\n[1] \"y,x\"\r\n```\r\n\r\n### Variable-based formatting\r\n\r\n\r\n```r\r\nrprintf(\"Hello, $name\", name=\"world\")\r\n```\r\n\r\n```\r\n[1] \"Hello, world\"\r\n```\r\n\r\n```r\r\nrprintf(\"$name ($age years old)\",name=\"Ken\",age=24)\r\n```\r\n\r\n```\r\n[1] \"Ken (24 years old)\"\r\n```\r\n\r\n```r\r\nrprintf(\"He is $age but has a height of $height:.2fcm\",age=18,height=190)\r\n```\r\n\r\n```\r\n[1] \"He is 18 but has a height of 190.00cm\"\r\n```\r\n\r\n```r\r\nrprintf(\"$a, $b:.1f, $c:+.2f, $b, $a:.0f\",a=1.56,b=2.34,c=3.78)\r\n```\r\n\r\n```\r\n[1] \"1.56, 2.3, +3.78, 2.34, 2\"\r\n```\r\n\r\nFor each type of formatting, a specialized function is also provided. `rprintv` only handles named variable-based formatting, and `rprintn` only handles number-based formatting.\r\n\r\n## License\r\n\r\nThis package is under [MIT License](http://opensource.org/licenses/MIT).\r\n","google":"UA-47159422-1","note":"Don't delete this file! It's used internally to help with page regeneration."}